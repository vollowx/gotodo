package main

import (
	"errors"
	"fmt"
	"time"
)

type Todo struct {
	priority int8
	deadline time.Time
	addedAt time.Time
	doneAt time.Time
	done bool
	summary string
	details string
}

func (x Todo) Print() {
	fmt.Printf("summary: %s\n", x.summary)
	fmt.Printf("details: %s\n", x.details)
	fmt.Printf("priority: %d\n", x.priority)
	fmt.Printf("deadline: %s\n", x.deadline.Local())
	fmt.Printf("added: %s\n", x.addedAt.Local())
}

const shortForm = "2006-01-02"

func newTodo() (Todo, error) {
	var _deadline, summary, details string
	var priority int8 = 1
	fmt.Printf("deadline: ")
	fmt.Scanln(&_deadline)
	fmt.Printf("summary: ")
	fmt.Scanln(&summary)
	fmt.Printf("details: ")
	fmt.Scanln(&details)
	fmt.Printf("priority (1-5): ")
	fmt.Scanln(&priority)

	var now = time.Now()
	var deadline, _ = time.Parse(shortForm, _deadline)

	todo := Todo{}

	if deadline.Compare(now) == -1 {
		return todo, errors.New("deadline is before today")
	}
	if priority > 5 || priority < 1 {
		return todo, errors.New("priority out of range")
	}

	todo.addedAt = time.Now()
	todo.deadline = deadline
	todo.summary = summary
	todo.details = details
	todo.priority = priority

	return todo, nil
}

func main() {
	todos := make([]Todo, 0)

	todo, err := newTodo()
	if err != nil {
		fmt.Printf("error: %s", err)
	} else {
		todos = append(todos, todo)
		todo.Print()
	}
}
